/* ========================================================================
   * Copyright 2014 Matisse
   *
   * Licensed under the MIT, The MIT License (MIT)
   * Copyright (c) 2014 Matisse
  
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
   * ========================================================================
  
  
  Source generated by CrudMaker version 1.0.0.201410152247*/

package co.edu.uniandes.csw.Matisse.respuesta.logic.ejb;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.UserTransaction;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import java.util.*;


import co.edu.uniandes.csw.Matisse.respuesta.logic.dto.RespuestaPageDTO;
import co.edu.uniandes.csw.Matisse.respuesta.logic.dto.RespuestaDTO;
import co.edu.uniandes.csw.Matisse.respuesta.logic.api.IRespuestaLogicService;
import co.edu.uniandes.csw.Matisse.respuesta.persistence.RespuestaPersistence;
import co.edu.uniandes.csw.Matisse.respuesta.persistence.api.IRespuestaPersistence;
import co.edu.uniandes.csw.Matisse.respuesta.persistence.entity.RespuestaEntity;
import co.edu.uniandes.csw.Matisse.respuesta.persistence.converter.RespuestaConverter;
import static co.edu.uniandes.csw.Matisse.util._TestUtil.*;

@RunWith(Arquillian.class)
public class RespuestaLogicServiceTest {

	public static final String DEPLOY = "Prueba";

	@Deployment
	public static WebArchive createDeployment() {
		return ShrinkWrap.create(WebArchive.class, DEPLOY + ".war")
				.addPackage(RespuestaLogicService.class.getPackage())
				.addPackage(IRespuestaLogicService.class.getPackage())
				.addPackage(RespuestaPersistence.class.getPackage())
				.addPackage(RespuestaEntity.class.getPackage())
				.addPackage(IRespuestaPersistence.class.getPackage())
                .addPackage(RespuestaDTO.class.getPackage())
                .addPackage(RespuestaConverter.class.getPackage())
                .addPackage(RespuestaEntity.class.getPackage())
				.addAsResource("META-INF/persistence.xml", "META-INF/persistence.xml")
                .addAsWebInfResource("META-INF/beans.xml", "beans.xml");
	}

	@Inject
	private IRespuestaLogicService respuestaLogicService;
	
	@Inject
	private IRespuestaPersistence respuestaPersistence;	

	@Before
	public void configTest() {
		try {
			clearData();
			insertData();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void clearData() {
		List<RespuestaDTO> dtos=respuestaPersistence.getRespuestas();
		for(RespuestaDTO dto:dtos){
			respuestaPersistence.deleteRespuesta(dto.getId());
		}
	}

	private List<RespuestaDTO> data=new ArrayList<RespuestaDTO>();

	private void insertData() {
		for(int i=0;i<3;i++){
			RespuestaDTO pdto=new RespuestaDTO();
			pdto.setName(generateRandom(String.class));
			pdto=respuestaPersistence.createRespuesta(pdto);
			data.add(pdto);
		}
	}
	
	@Test
	public void createRespuestaTest(){
		RespuestaDTO ldto=new RespuestaDTO();
		ldto.setName(generateRandom(String.class));
		
		
		RespuestaDTO result=respuestaLogicService.createRespuesta(ldto);
		
		Assert.assertNotNull(result);
		
		RespuestaDTO pdto=respuestaPersistence.getRespuesta(result.getId());
		
		Assert.assertEquals(ldto.getName(), pdto.getName());	
	}
	
	@Test
	public void getRespuestasTest(){
		List<RespuestaDTO> list=respuestaLogicService.getRespuestas();
		Assert.assertEquals(list.size(), data.size());
        for(RespuestaDTO ldto:list){
        	boolean found=false;
            for(RespuestaDTO pdto:data){
            	if(ldto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	@Test
	public void getRespuestaTest(){
		RespuestaDTO pdto=data.get(0);
		RespuestaDTO ldto=respuestaLogicService.getRespuesta(pdto.getId());
        Assert.assertNotNull(ldto);
		Assert.assertEquals(pdto.getName(), ldto.getName());
        
	}
	
	@Test
	public void deleteRespuestaTest(){
		RespuestaDTO pdto=data.get(0);
		respuestaLogicService.deleteRespuesta(pdto.getId());
        RespuestaDTO deleted=respuestaPersistence.getRespuesta(pdto.getId());
        Assert.assertNull(deleted);
	}
	
	@Test
	public void updateRespuestaTest(){
		RespuestaDTO pdto=data.get(0);
		
		RespuestaDTO ldto=new RespuestaDTO();
		ldto.setId(pdto.getId());
		ldto.setName(generateRandom(String.class));
		
		
		respuestaLogicService.updateRespuesta(ldto);
		
		
		RespuestaDTO resp=respuestaPersistence.getRespuesta(pdto.getId());
		
		Assert.assertEquals(ldto.getName(), resp.getName());	
	}
	
	@Test
	public void getRespuestaPaginationTest(){
		
		RespuestaPageDTO dto1=respuestaLogicService.getRespuestas(1,2);
		Assert.assertNotNull(dto1);
        Assert.assertEquals(dto1.getRecords().size(),2);
        Assert.assertEquals(dto1.getTotalRecords().longValue(),3L);
		
		
		RespuestaPageDTO dto2=respuestaLogicService.getRespuestas(2,2);
		Assert.assertNotNull(dto2);
        Assert.assertEquals(dto2.getRecords().size(),1);
        Assert.assertEquals(dto2.getTotalRecords().longValue(),3L);
		
		for(RespuestaDTO dto:dto1.getRecords()){
        	boolean found=false;
            for(RespuestaDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        for(RespuestaDTO dto:dto2.getRecords()){
        	boolean found=false;
            for(RespuestaDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        RespuestaPageDTO dto3=respuestaLogicService.getRespuestas(1,3);
		Assert.assertNotNull(dto3);
        Assert.assertEquals(dto3.getRecords().size(),data.size());
        Assert.assertEquals(dto3.getTotalRecords().longValue(),data.size());
		
		for(RespuestaDTO dto:dto3.getRecords()){
        	boolean found=false;
            for(RespuestaDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	
}
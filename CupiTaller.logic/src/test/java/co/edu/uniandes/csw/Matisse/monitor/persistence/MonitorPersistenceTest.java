/* ========================================================================
   * Copyright 2014 Matisse
   *
   * Licensed under the MIT, The MIT License (MIT)
   * Copyright (c) 2014 Matisse
  
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
   * ========================================================================
  
  
  Source generated by CrudMaker version 1.0.0.201410152247*/

package co.edu.uniandes.csw.Matisse.monitor.persistence;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.UserTransaction;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import java.util.*;


import co.edu.uniandes.csw.Matisse.monitor.logic.dto.MonitorPageDTO;
import co.edu.uniandes.csw.Matisse.monitor.logic.dto.MonitorDTO;
import co.edu.uniandes.csw.Matisse.monitor.persistence.api.IMonitorPersistence;
import co.edu.uniandes.csw.Matisse.monitor.persistence.entity.MonitorEntity;
import co.edu.uniandes.csw.Matisse.monitor.persistence.converter.MonitorConverter;
import static co.edu.uniandes.csw.Matisse.util._TestUtil.*;

@RunWith(Arquillian.class)
public class MonitorPersistenceTest {

	public static final String DEPLOY = "Prueba";

	@Deployment
	public static WebArchive createDeployment() {
		return ShrinkWrap.create(WebArchive.class, DEPLOY + ".war")
				.addPackage(MonitorPersistence.class.getPackage())
				.addPackage(MonitorEntity.class.getPackage())
				.addPackage(IMonitorPersistence.class.getPackage())
                .addPackage(MonitorDTO.class.getPackage())
                .addPackage(MonitorConverter.class.getPackage())
				.addAsResource("META-INF/persistence.xml", "META-INF/persistence.xml")
                .addAsWebInfResource("META-INF/beans.xml", "beans.xml");
	}

	@Inject
	private IMonitorPersistence monitorPersistence;

	@PersistenceContext
	private EntityManager em;

	@Inject
	UserTransaction utx;

	@Before
	public void configTest() {
		System.out.println("em: " + em);
		try {
			utx.begin();
			clearData();
			insertData();
			utx.commit();
		} catch (Exception e) {
			e.printStackTrace();
			try {
				utx.rollback();
			} catch (Exception e1) {
				e1.printStackTrace();
			}
		}
	}

	private void clearData() {
		em.createQuery("delete from MonitorEntity").executeUpdate();
	}

	private List<MonitorEntity> data=new ArrayList<MonitorEntity>();

	private void insertData() {
		for(int i=0;i<3;i++){
			MonitorEntity entity=new MonitorEntity();
			entity.setName(generateRandom(String.class));
			entity.setActivo(generateRandom(Boolean.class));
			entity.setUsuario(generateRandom(String.class));
			entity.setPuntosNegativos(generateRandom(Integer.class));
			entity.setCarrera(generateRandom(String.class));
			em.persist(entity);
			data.add(entity);
		}
	}
	
	@Test
	public void createMonitorTest(){
		MonitorDTO dto=new MonitorDTO();
		dto.setName(generateRandom(String.class));
		dto.setActivo(generateRandom(Boolean.class));
		dto.setUsuario(generateRandom(String.class));
		dto.setPuntosNegativos(generateRandom(Integer.class));
		dto.setCarrera(generateRandom(String.class));
		
		MonitorDTO result=monitorPersistence.createMonitor(dto);
		
		Assert.assertNotNull(result);
		
		MonitorEntity entity=em.find(MonitorEntity.class, result.getId());
		
		Assert.assertEquals(dto.getName(), entity.getName());
		Assert.assertEquals(dto.getActivo(), entity.getActivo());
		Assert.assertEquals(dto.getUsuario(), entity.getUsuario());
		Assert.assertEquals(dto.getPuntosNegativos(), entity.getPuntosNegativos());
		Assert.assertEquals(dto.getCarrera(), entity.getCarrera());
	}
	
	@Test
	public void getMonitorsTest(){
		List<MonitorDTO> list=monitorPersistence.getMonitors();
		Assert.assertEquals(list.size(), data.size());
        for(MonitorDTO dto:list){
        	boolean found=false;
            for(MonitorEntity entity:data){
            	if(dto.getId().equals(entity.getId())){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	@Test
	public void getMonitorTest(){
		MonitorEntity entity=data.get(0);
		MonitorDTO dto=monitorPersistence.getMonitor(entity.getId());
        Assert.assertNotNull(dto);
		Assert.assertEquals(entity.getName(), dto.getName());
		Assert.assertEquals(entity.getActivo(), dto.getActivo());
		Assert.assertEquals(entity.getUsuario(), dto.getUsuario());
		Assert.assertEquals(entity.getPuntosNegativos(), dto.getPuntosNegativos());
		Assert.assertEquals(entity.getCarrera(), dto.getCarrera());
        
	}
	
	@Test
	public void deleteMonitorTest(){
		MonitorEntity entity=data.get(0);
		monitorPersistence.deleteMonitor(entity.getId());
        MonitorEntity deleted=em.find(MonitorEntity.class, entity.getId());
        Assert.assertNull(deleted);
	}
	
	@Test
	public void updateMonitorTest(){
		MonitorEntity entity=data.get(0);
		
		MonitorDTO dto=new MonitorDTO();
		dto.setId(entity.getId());
		dto.setName(generateRandom(String.class));
		dto.setActivo(generateRandom(Boolean.class));
		dto.setUsuario(generateRandom(String.class));
		dto.setPuntosNegativos(generateRandom(Integer.class));
		dto.setCarrera(generateRandom(String.class));
		
		
		monitorPersistence.updateMonitor(dto);
		
		
		MonitorEntity resp=em.find(MonitorEntity.class, entity.getId());
		
		Assert.assertEquals(dto.getName(), resp.getName());	
		Assert.assertEquals(dto.getActivo(), resp.getActivo());	
		Assert.assertEquals(dto.getUsuario(), resp.getUsuario());	
		Assert.assertEquals(dto.getPuntosNegativos(), resp.getPuntosNegativos());	
		Assert.assertEquals(dto.getCarrera(), resp.getCarrera());	
	}
	
	@Test
	public void getMonitorPaginationTest(){
		//Page 1
		MonitorPageDTO dto1=monitorPersistence.getMonitors(1,2);
        Assert.assertNotNull(dto1);
        Assert.assertEquals(dto1.getRecords().size(),2);
        Assert.assertEquals(dto1.getTotalRecords().longValue(),3L);
        //Page 2
        MonitorPageDTO dto2=monitorPersistence.getMonitors(2,2);
        Assert.assertNotNull(dto2);
        Assert.assertEquals(dto2.getRecords().size(),1);
        Assert.assertEquals(dto2.getTotalRecords().longValue(),3L);
        
        for(MonitorDTO dto:dto1.getRecords()){
        	boolean found=false;	
            for(MonitorEntity entity:data){
            	if(dto.getId().equals(entity.getId())){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        for(MonitorDTO dto:dto2.getRecords()){
        	boolean found=false;
            for(MonitorEntity entity:data){
            	if(dto.getId().equals(entity.getId())){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
}
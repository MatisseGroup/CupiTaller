/* ========================================================================
   * Copyright 2014 Matisse
   *
   * Licensed under the MIT, The MIT License (MIT)
   * Copyright (c) 2014 Matisse
  
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
   * ========================================================================
  
  
  Source generated by CrudMaker version 1.0.0.201410152247*/

package co.edu.uniandes.csw.Matisse.sesion.logic.ejb;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.UserTransaction;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import java.util.*;


import co.edu.uniandes.csw.Matisse.sesion.logic.dto.SesionPageDTO;
import co.edu.uniandes.csw.Matisse.sesion.logic.dto.SesionDTO;
import co.edu.uniandes.csw.Matisse.sesion.logic.api.ISesionLogicService;
import co.edu.uniandes.csw.Matisse.sesion.persistence.SesionPersistence;
import co.edu.uniandes.csw.Matisse.sesion.persistence.api.ISesionPersistence;
import co.edu.uniandes.csw.Matisse.sesion.persistence.entity.SesionEntity;
import co.edu.uniandes.csw.Matisse.sesion.persistence.converter.SesionConverter;
import static co.edu.uniandes.csw.Matisse.util._TestUtil.*;

@RunWith(Arquillian.class)
public class SesionLogicServiceTest {

	public static final String DEPLOY = "Prueba";

	@Deployment
	public static WebArchive createDeployment() {
		return ShrinkWrap.create(WebArchive.class, DEPLOY + ".war")
				.addPackage(SesionLogicService.class.getPackage())
				.addPackage(ISesionLogicService.class.getPackage())
				.addPackage(SesionPersistence.class.getPackage())
				.addPackage(SesionEntity.class.getPackage())
				.addPackage(ISesionPersistence.class.getPackage())
                .addPackage(SesionDTO.class.getPackage())
                .addPackage(SesionConverter.class.getPackage())
                .addPackage(SesionEntity.class.getPackage())
				.addAsResource("META-INF/persistence.xml", "META-INF/persistence.xml")
                .addAsWebInfResource("META-INF/beans.xml", "beans.xml");
	}

	@Inject
	private ISesionLogicService sesionLogicService;
	
	@Inject
	private ISesionPersistence sesionPersistence;	

	@Before
	public void configTest() {
		try {
			clearData();
			insertData();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void clearData() {
		List<SesionDTO> dtos=sesionPersistence.getSesions();
		for(SesionDTO dto:dtos){
			sesionPersistence.deleteSesion(dto.getId());
		}
	}

	private List<SesionDTO> data=new ArrayList<SesionDTO>();

	private void insertData() {
		for(int i=0;i<3;i++){
			SesionDTO pdto=new SesionDTO();
			pdto.setName(generateRandom(String.class));
			pdto.setEstado(generateRandom(String.class));
			pdto.setFecha(generateRandomDate());
			pdto.setSemanaAnual(generateRandom(Integer.class));
			pdto.setDia(generateRandom(String.class));
			pdto.setEstudianteId(generateRandom(Long.class));
			pdto.setMonitorId(generateRandom(Long.class));
			pdto=sesionPersistence.createSesion(pdto);
			data.add(pdto);
		}
	}
	
	@Test
	public void createSesionTest(){
		SesionDTO ldto=new SesionDTO();
		ldto.setName(generateRandom(String.class));
		ldto.setEstado(generateRandom(String.class));
		ldto.setFecha(generateRandomDate());
		ldto.setSemanaAnual(generateRandom(Integer.class));
		ldto.setDia(generateRandom(String.class));
		ldto.setEstudianteId(generateRandom(Long.class));
		ldto.setMonitorId(generateRandom(Long.class));
		
		
		SesionDTO result=sesionLogicService.createSesion(ldto);
		
		Assert.assertNotNull(result);
		
		SesionDTO pdto=sesionPersistence.getSesion(result.getId());
		
		Assert.assertEquals(ldto.getName(), pdto.getName());	
		Assert.assertEquals(ldto.getEstado(), pdto.getEstado());	
		Assert.assertEquals(ldto.getFecha(), pdto.getFecha());	
		Assert.assertEquals(ldto.getSemanaAnual(), pdto.getSemanaAnual());	
		Assert.assertEquals(ldto.getDia(), pdto.getDia());	
		Assert.assertEquals(ldto.getEstudianteId(), pdto.getEstudianteId());	
		Assert.assertEquals(ldto.getMonitorId(), pdto.getMonitorId());	
	}
	
	@Test
	public void getSesionsTest(){
		List<SesionDTO> list=sesionLogicService.getSesions();
		Assert.assertEquals(list.size(), data.size());
        for(SesionDTO ldto:list){
        	boolean found=false;
            for(SesionDTO pdto:data){
            	if(ldto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	@Test
	public void getSesionTest(){
		SesionDTO pdto=data.get(0);
		SesionDTO ldto=sesionLogicService.getSesion(pdto.getId());
        Assert.assertNotNull(ldto);
		Assert.assertEquals(pdto.getName(), ldto.getName());
		Assert.assertEquals(pdto.getEstado(), ldto.getEstado());
		Assert.assertEquals(pdto.getFecha(), ldto.getFecha());
		Assert.assertEquals(pdto.getSemanaAnual(), ldto.getSemanaAnual());
		Assert.assertEquals(pdto.getDia(), ldto.getDia());
		Assert.assertEquals(pdto.getEstudianteId(), ldto.getEstudianteId());
		Assert.assertEquals(pdto.getMonitorId(), ldto.getMonitorId());
        
	}
	
	@Test
	public void deleteSesionTest(){
		SesionDTO pdto=data.get(0);
		sesionLogicService.deleteSesion(pdto.getId());
        SesionDTO deleted=sesionPersistence.getSesion(pdto.getId());
        Assert.assertNull(deleted);
	}
	
	@Test
	public void updateSesionTest(){
		SesionDTO pdto=data.get(0);
		
		SesionDTO ldto=new SesionDTO();
		ldto.setId(pdto.getId());
		ldto.setName(generateRandom(String.class));
		ldto.setEstado(generateRandom(String.class));
		ldto.setFecha(generateRandomDate());
		ldto.setSemanaAnual(generateRandom(Integer.class));
		ldto.setDia(generateRandom(String.class));
		ldto.setEstudianteId(generateRandom(Long.class));
		ldto.setMonitorId(generateRandom(Long.class));
		
		
		sesionLogicService.updateSesion(ldto);
		
		
		SesionDTO resp=sesionPersistence.getSesion(pdto.getId());
		
		Assert.assertEquals(ldto.getName(), resp.getName());	
		Assert.assertEquals(ldto.getEstado(), resp.getEstado());	
		Assert.assertEquals(ldto.getFecha(), resp.getFecha());	
		Assert.assertEquals(ldto.getSemanaAnual(), resp.getSemanaAnual());	
		Assert.assertEquals(ldto.getDia(), resp.getDia());	
		Assert.assertEquals(ldto.getEstudianteId(), resp.getEstudianteId());	
		Assert.assertEquals(ldto.getMonitorId(), resp.getMonitorId());	
	}
	
	@Test
	public void getSesionPaginationTest(){
		
		SesionPageDTO dto1=sesionLogicService.getSesions(1,2);
		Assert.assertNotNull(dto1);
        Assert.assertEquals(dto1.getRecords().size(),2);
        Assert.assertEquals(dto1.getTotalRecords().longValue(),3L);
		
		
		SesionPageDTO dto2=sesionLogicService.getSesions(2,2);
		Assert.assertNotNull(dto2);
        Assert.assertEquals(dto2.getRecords().size(),1);
        Assert.assertEquals(dto2.getTotalRecords().longValue(),3L);
		
		for(SesionDTO dto:dto1.getRecords()){
        	boolean found=false;
            for(SesionDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        for(SesionDTO dto:dto2.getRecords()){
        	boolean found=false;
            for(SesionDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        SesionPageDTO dto3=sesionLogicService.getSesions(1,3);
		Assert.assertNotNull(dto3);
        Assert.assertEquals(dto3.getRecords().size(),data.size());
        Assert.assertEquals(dto3.getTotalRecords().longValue(),data.size());
		
		for(SesionDTO dto:dto3.getRecords()){
        	boolean found=false;
            for(SesionDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	
}
/* ========================================================================
   * Copyright 2014 Matisse
   *
   * Licensed under the MIT, The MIT License (MIT)
   * Copyright (c) 2014 Matisse
  
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
   * ========================================================================
  
  
  Source generated by CrudMaker version 1.0.0.201410152247*/

package co.edu.uniandes.csw.Matisse.pregunta.logic.ejb;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.UserTransaction;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import java.util.*;


import co.edu.uniandes.csw.Matisse.pregunta.logic.dto.PreguntaPageDTO;
import co.edu.uniandes.csw.Matisse.pregunta.logic.dto.PreguntaDTO;
import co.edu.uniandes.csw.Matisse.pregunta.logic.api.IPreguntaLogicService;
import co.edu.uniandes.csw.Matisse.pregunta.persistence.PreguntaPersistence;
import co.edu.uniandes.csw.Matisse.pregunta.persistence.api.IPreguntaPersistence;
import co.edu.uniandes.csw.Matisse.pregunta.persistence.entity.PreguntaEntity;
import co.edu.uniandes.csw.Matisse.pregunta.persistence.converter.PreguntaConverter;
import static co.edu.uniandes.csw.Matisse.util._TestUtil.*;

@RunWith(Arquillian.class)
public class PreguntaLogicServiceTest {

	public static final String DEPLOY = "Prueba";

	@Deployment
	public static WebArchive createDeployment() {
		return ShrinkWrap.create(WebArchive.class, DEPLOY + ".war")
				.addPackage(PreguntaLogicService.class.getPackage())
				.addPackage(IPreguntaLogicService.class.getPackage())
				.addPackage(PreguntaPersistence.class.getPackage())
				.addPackage(PreguntaEntity.class.getPackage())
				.addPackage(IPreguntaPersistence.class.getPackage())
                .addPackage(PreguntaDTO.class.getPackage())
                .addPackage(PreguntaConverter.class.getPackage())
                .addPackage(PreguntaEntity.class.getPackage())
				.addAsResource("META-INF/persistence.xml", "META-INF/persistence.xml")
                .addAsWebInfResource("META-INF/beans.xml", "beans.xml");
	}

	@Inject
	private IPreguntaLogicService preguntaLogicService;
	
	@Inject
	private IPreguntaPersistence preguntaPersistence;	

	@Before
	public void configTest() {
		try {
			clearData();
			insertData();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void clearData() {
		List<PreguntaDTO> dtos=preguntaPersistence.getPreguntas();
		for(PreguntaDTO dto:dtos){
			preguntaPersistence.deletePregunta(dto.getId());
		}
	}

	private List<PreguntaDTO> data=new ArrayList<PreguntaDTO>();

	private void insertData() {
		for(int i=0;i<3;i++){
			PreguntaDTO pdto=new PreguntaDTO();
			pdto.setName(generateRandom(String.class));
			pdto=preguntaPersistence.createPregunta(pdto);
			data.add(pdto);
		}
	}
	
	@Test
	public void createPreguntaTest(){
		PreguntaDTO ldto=new PreguntaDTO();
		ldto.setName(generateRandom(String.class));
		
		
		PreguntaDTO result=preguntaLogicService.createPregunta(ldto);
		
		Assert.assertNotNull(result);
		
		PreguntaDTO pdto=preguntaPersistence.getPregunta(result.getId());
		
		Assert.assertEquals(ldto.getName(), pdto.getName());	
	}
	
	@Test
	public void getPreguntasTest(){
		List<PreguntaDTO> list=preguntaLogicService.getPreguntas();
		Assert.assertEquals(list.size(), data.size());
        for(PreguntaDTO ldto:list){
        	boolean found=false;
            for(PreguntaDTO pdto:data){
            	if(ldto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	@Test
	public void getPreguntaTest(){
		PreguntaDTO pdto=data.get(0);
		PreguntaDTO ldto=preguntaLogicService.getPregunta(pdto.getId());
        Assert.assertNotNull(ldto);
		Assert.assertEquals(pdto.getName(), ldto.getName());
        
	}
	
	@Test
	public void deletePreguntaTest(){
		PreguntaDTO pdto=data.get(0);
		preguntaLogicService.deletePregunta(pdto.getId());
        PreguntaDTO deleted=preguntaPersistence.getPregunta(pdto.getId());
        Assert.assertNull(deleted);
	}
	
	@Test
	public void updatePreguntaTest(){
		PreguntaDTO pdto=data.get(0);
		
		PreguntaDTO ldto=new PreguntaDTO();
		ldto.setId(pdto.getId());
		ldto.setName(generateRandom(String.class));
		
		
		preguntaLogicService.updatePregunta(ldto);
		
		
		PreguntaDTO resp=preguntaPersistence.getPregunta(pdto.getId());
		
		Assert.assertEquals(ldto.getName(), resp.getName());	
	}
	
	@Test
	public void getPreguntaPaginationTest(){
		
		PreguntaPageDTO dto1=preguntaLogicService.getPreguntas(1,2);
		Assert.assertNotNull(dto1);
        Assert.assertEquals(dto1.getRecords().size(),2);
        Assert.assertEquals(dto1.getTotalRecords().longValue(),3L);
		
		
		PreguntaPageDTO dto2=preguntaLogicService.getPreguntas(2,2);
		Assert.assertNotNull(dto2);
        Assert.assertEquals(dto2.getRecords().size(),1);
        Assert.assertEquals(dto2.getTotalRecords().longValue(),3L);
		
		for(PreguntaDTO dto:dto1.getRecords()){
        	boolean found=false;
            for(PreguntaDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        for(PreguntaDTO dto:dto2.getRecords()){
        	boolean found=false;
            for(PreguntaDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        PreguntaPageDTO dto3=preguntaLogicService.getPreguntas(1,3);
		Assert.assertNotNull(dto3);
        Assert.assertEquals(dto3.getRecords().size(),data.size());
        Assert.assertEquals(dto3.getTotalRecords().longValue(),data.size());
		
		for(PreguntaDTO dto:dto3.getRecords()){
        	boolean found=false;
            for(PreguntaDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	
}
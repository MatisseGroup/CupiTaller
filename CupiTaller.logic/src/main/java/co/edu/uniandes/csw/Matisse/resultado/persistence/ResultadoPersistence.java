/* ========================================================================
 * Copyright 2014 Matisse
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 Matisse
  
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:
  
 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.
  
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 * ========================================================================
  
  
 Source generated by CrudMaker version 1.0.0.201410152247*/

package co.edu.uniandes.csw.Matisse.resultado.persistence;

import co.edu.uniandes.csw.Matisse.API.ServiciosAPI;
import co.edu.uniandes.csw.Matisse.pregunta.logic.dto.PreguntaDTO;
import co.edu.uniandes.csw.Matisse.resultado.persistence.api.IResultadoPersistence;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.enterprise.inject.Default;
import org.codehaus.jettison.json.JSONArray;
import org.codehaus.jettison.json.JSONException;
import org.codehaus.jettison.json.JSONObject;

@Default
@Stateless
@LocalBean
public class ResultadoPersistence extends _ResultadoPersistence implements IResultadoPersistence {
    
    public final static int ID_SURVEY = 68124;
    public final static int COD_RESPUESTA = 471;
    
    public ArrayList<PreguntaDTO> listarPreguntas() {
        ServiciosAPI limeSurvey = ServiciosAPI.getInstance();
        ArrayList<PreguntaDTO> returnPreguntas = new ArrayList<PreguntaDTO>();
        JSONArray surveyGroups = limeSurvey.listGroups(ID_SURVEY);
        int cantG = surveyGroups.length();
        for (int i = 0; i < cantG; i++) {
            try {
                JSONObject groupActual = surveyGroups.getJSONObject(i);
                int idGrupo = groupActual.getJSONObject("id").getInt("gid");
                JSONArray groupQuestions = limeSurvey.listQuestions(ID_SURVEY, idGrupo);
                int cantQperG = groupQuestions.length();
                for (int j = 0; j < cantQperG; j++) {
                    JSONObject qActual = groupQuestions.getJSONObject(j);
                    PreguntaDTO pregActual = new PreguntaDTO();
                    pregActual.setPregunta(qActual.getString("question")
                            .replaceAll("&aacute;", "á").replaceAll("&eacute;", "é")
                    .replaceAll("&iacute;", "í").replaceAll("&oacute;", "ó")
                    .replaceAll("&uacute;", "ú").replaceAll("&ntilde;", "ñ"));
                    pregActual.setQid(qActual.getJSONObject("id").getInt("qid"));
                    pregActual.setName(qActual.getString("title"));
                    returnPreguntas.add(pregActual);
                }
            } catch (JSONException ex) {
                System.err.println("Error con API");
                ex.printStackTrace();
            }            
        }
        return returnPreguntas;
    }
    
    public PreguntaDTO respuestaALaPreguntaNumerica(ServiciosAPI limeSurvey,PreguntaDTO pregunta, int id){
        JSONObject surveyQuestion = limeSurvey.getQuestionsProperties(id);
        try{
            String titulo = surveyQuestion.getString("title");
            String pregun = surveyQuestion.getString("question")
                    .replaceAll("&aacute;", "á").replaceAll("&eacute;", "é")
                    .replaceAll("&iacute;", "í").replaceAll("&oacute;", "ó")
                    .replaceAll("&uacute;", "ú").replaceAll("&ntilde;", "ñ");
            pregunta.setName(titulo);
            pregunta.setPregunta(pregun);
            pregunta.setQid(8);
            int[] valores = new int[5];
            String[] opciones = new String[5];
            llenarTablaNumerica(opciones);
            JSONObject surveyResponses = limeSurvey.exportResponses();
            JSONArray arrayRespones = surveyResponses.getJSONArray("responses");
            int longi = arrayRespones.length();
            llenarValoresNumericos(longi, valores, arrayRespones, titulo);
            pregunta.setValores(valores);
            pregunta.setOpciones(opciones);
        }
        catch(JSONException e){
            e.printStackTrace();
        }
        return pregunta;
    }
    
    private void llenarTablaNumerica(String[] opciones){
        for (int i = 0; i < 5; i++) {
                opciones[i] = (i+1)+""; 
            }
    }
    
    private void llenarValoresNumericos(int cantRespuesta, int[] valores, JSONArray respuestas, String  title){
        for (int i = 0, j = COD_RESPUESTA; i < cantRespuesta; i++, j++) {
            try {
                JSONObject actual = respuestas.getJSONObject(i);
                int opcio = actual.getJSONObject("" + j).getInt(title);
                valores[opcio-1]++;
                              
            } catch (JSONException ex) {
//                            e.printStackTrace();
            }
        }
    }
    
    public PreguntaDTO respuestaA(int id) {
        ServiciosAPI limeSurvey = ServiciosAPI.getInstance();        
        PreguntaDTO pregunta = new PreguntaDTO();
        if (id == 8 || id == 11) { //Es la pregunta que tiene 5 opciones
            return respuestaALaPreguntaNumerica(limeSurvey,pregunta, id);
        }
        JSONObject surveyQuestion = limeSurvey.getQuestionsProperties(id);
        try {
            String titulo = surveyQuestion.getString("title");
            String pregu = surveyQuestion.getString("question")
                    .replaceAll("&aacute;", "á").replaceAll("&eacute;", "é")
                    .replaceAll("&iacute;", "í").replaceAll("&oacute;", "ó")
                    .replaceAll("&uacute;", "ú").replaceAll("&ntilde;", "ñ");
            pregunta.setPregunta(pregu);
            pregunta.setName(titulo);
            pregunta.setQid(id);
            int[] valores = new int[4];
            String[] opciones = new String[4];
            JSONObject options = surveyQuestion.getJSONObject("answeroptions");
            opciones[0] = options.getJSONObject("A1").getString("answer");
            opciones[1] = options.getJSONObject("A2").getString("answer");
            opciones[2] = options.getJSONObject("A3").getString("answer");
            opciones[3] = options.getJSONObject("A4").getString("answer");
            JSONObject respuestas = limeSurvey.exportResponses();
            JSONArray arrayRespuesta = respuestas.getJSONArray("responses");
            int longi = arrayRespuesta.length();         
            llenarValoresTexto(longi, valores, arrayRespuesta, titulo);
            pregunta.setValores(valores);
            pregunta.setOpciones(opciones);
        } catch (JSONException ex) {
            Logger.getLogger(ResultadoPersistence.class.getName()).log(Level.SEVERE, null, ex);
        }
        return pregunta;        
    }
    
    private void llenarValoresTexto(int cantRespuesta, int[] valores, JSONArray respuestas, String  title){
        for (int i = 0, j = COD_RESPUESTA; i < cantRespuesta; i++, j++) {
            try {
                JSONObject actual = respuestas.getJSONObject(i);
                String opcio = actual.getJSONObject("" + j).getString(title);
                if (opcio.equals("A1")) {
                    valores[0]++;
                } else if (opcio.equals("A2")) {
                    valores[1]++;
                } else if (opcio.equals("A3")) {
                    valores[2]++;
                } else if (opcio.equals("A4")) {
                    valores[3]++;
                }                
            } catch (JSONException ex) {
//                            e.printStackTrace();
            }
        }
    }
}
